@inject IEncounterProvider EncounterProvider
@inject IPartyProvider PartyProvider
@inject IMessageProvider MessageProvider
@inject NavigationManager NavManager
@using PerilDungeon.Classes.Encounters

<h4>@encounter.Title</h4>
<p>@encounter.Description</p>

@foreach (var choice in encounter.Choices)
{
    <button @onclick="()=>HaveEncounter(choice)" class="btn btn-primary" disabled="@DisabledFromChoice(choice)">@choice.Text</button>
}

@code {
    private IEncounter encounter;
    private Party party;
    protected override void OnInitialized()
    {
        party = PartyProvider.Party;
        encounter = EncounterProvider.NextEncounter;
        EncounterProvider.RefreshRequested += RefreshMe;
    }

    private void HaveEncounter(IEncounterChoice e)
    {
        IEnumerable<string> messages = e.Choose(party);
        foreach (string message in messages)
        {
            MessageProvider.AddMessage(message);
        }
        MessageProvider.CallRequestRefresh();
        PartyProvider.CallRequestRefresh();
        if (party.GameOver)
        {
            party.GameOver = false;
            NavManager.NavigateTo("gameover");
            EncounterProvider.NextEncounter = new FirstEncounter();
            encounter = EncounterProvider.NextEncounter; //apparently this is the main loop?
            EncounterProvider.CallRequestRefresh();
            return;
        }
        if (party.MainQuestProgress == MainQuestProgress.Victory)
        {
            party.MainQuestProgress = MainQuestProgress.Beginning;
            NavManager.NavigateTo("victory");
            EncounterProvider.NextEncounter = new FirstEncounter();
            encounter = EncounterProvider.NextEncounter; //apparently this is the main loop?
            EncounterProvider.CallRequestRefresh();

        }
        EncounterProvider.NextEncounter = e.GetNextEncounter(party, encounter);
        encounter = EncounterProvider.NextEncounter; //apparently this is the main loop?
        EncounterProvider.CallRequestRefresh();
    }

    private bool DisabledFromChoice(IEncounterChoice e)
    {
        return !e.IsAvailable;
    }

    private void RefreshMe()
    {
        StateHasChanged();
    }
}
